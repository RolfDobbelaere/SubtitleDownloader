/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package subtitlemanager;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Path;
import java.nio.file.Paths;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import static subtitlemanager.SubtitleManager.hashAlgo;

/**
 *
 * @author atulgupta
 */
public class SubtitleDownloaderUI extends javax.swing.JFrame {

    private String mFilePath;
    private String mLang;
    private String[] mLangArray;
    private String mSavePath;

    /**
     * Creates new form SubtitleDownloaderUI
     */
    public SubtitleDownloaderUI() {
        initComponents();
    }

    public SubtitleDownloaderUI(String[] langArray) {
        this.mLangArray = langArray;
        initComponents();
        initComboBox();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        pathNameTextField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        submitButton = new javax.swing.JButton();
        langComboBox = new javax.swing.JComboBox<>();
        openFileManagerButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Subtitle Downloader");

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel1.setText("Choose File Path:");

        pathNameTextField.setToolTipText("File path with file name");
        pathNameTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pathNameTextFieldActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel2.setText("Choose Language:");

        submitButton.setText("Submit");
        submitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitButtonActionPerformed(evt);
            }
        });

        openFileManagerButton.setText("Open");
        openFileManagerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openFileManagerButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(submitButton)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addGap(24, 24, 24)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(langComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(pathNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(openFileManagerButton)))
                .addContainerGap(45, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(pathNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(openFileManagerButton))
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(langComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 187, Short.MAX_VALUE)
                .addComponent(submitButton)
                .addGap(25, 25, 25))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void pathNameTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pathNameTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_pathNameTextFieldActionPerformed

    private void submitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitButtonActionPerformed
        String pathNameString = "";
        pathNameString = pathNameTextField.getText();
        if (pathNameString.equals("")) {
            JOptionPane.showMessageDialog(this, "File path shouldn't be empty!", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            mFilePath = pathNameString;
            Path filePath = Paths.get(mFilePath);
            //System.out.println("path: " + filePath.toString() + " " + filePath);
            VideoHashCalc videoHashCalc = new VideoHashCalc();
            String videoHash = videoHashCalc.getHash(filePath.toString(), hashAlgo);
            String subtitle = "";
            if (videoHash != "") {
                HTTPRequest httpRequest = new HTTPRequest();
                subtitle = httpRequest.sendRequest(videoHash, "en");
            }else{
                return;
            }
            mSavePath = filePath.toString();
            mSavePath = removeExtension(mSavePath);
            if (!subtitle.equals("")) {
                try {
                    BufferedWriter out = new BufferedWriter(new FileWriter(mSavePath + ".srt"));
                    out.write(subtitle);  //Replace with the string 
                    //you are trying to write  
                    out.close();
                } catch (IOException e) {
                    System.out.println("Exception ");
                }
            } else {
                System.out.println("Subtitle found Null");
            }
        }
    }//GEN-LAST:event_submitButtonActionPerformed

    private void openFileManagerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openFileManagerButtonActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.showOpenDialog(null);
        File file = fileChooser.getSelectedFile();
        String filename = file.getAbsolutePath();
        pathNameTextField.setText(filename);
    }//GEN-LAST:event_openFileManagerButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SubtitleDownloaderUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SubtitleDownloaderUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SubtitleDownloaderUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SubtitleDownloaderUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new SubtitleDownloaderUI().setVisible(true);
        });
    }

    public String getFilePath() {
        return mFilePath;
    }

    public String getLang() {
        return mLang;
    }

    public String getSavePath() {
        return mSavePath;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JComboBox<String> langComboBox;
    private javax.swing.JButton openFileManagerButton;
    private javax.swing.JTextField pathNameTextField;
    private javax.swing.JButton submitButton;
    // End of variables declaration//GEN-END:variables

    private void initComboBox() {
        for (String lang : mLangArray) {
            langComboBox.addItem(lang);
        }
    }

    private String removeExtension(String mSavePath) {
        if (mSavePath.lastIndexOf(System.getProperty("file.separator")) <= mSavePath.lastIndexOf(".")) {
            return mSavePath.substring(0, mSavePath.lastIndexOf("."));
        } else {
            return mSavePath;
        }
    }
}
